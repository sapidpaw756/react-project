@import "variables";

@mixin computeFsLineHeightEM($fontSize, $lineHeight) {
    font-size: $fontSize / $baseFontSize + em;
    line-height: $lineHeight / $fontSize + em;   
}

@mixin breakpoint($breakpoint) {
    // If the key exists in the map
    @if map-has-key($breakpoints, $breakpoint) {
        // Prints a media query based on the value
        @media #{inspect(map-get($breakpoints, $breakpoint))} {
            @content;
        }
    }
    // If the key doesn't exist in the map
    @else {
        @warn "Unfortunately, no value could be retrieved from `#{$breakpoint}`. "+"Available breakpoints are: #{map-keys($breakpoints)}.";
    }
}

@mixin bootstrap-container-behaviour {
    margin: 0 auto;
    padding-right: 15px;
    padding-left: 15px;
    @media (min-width: 576px) {
        max-width: 540px;
    }
    @media (min-width: 768px) {
        max-width: 720px;
    }
    @media (min-width: 992px) {
        max-width: 960px;
    }
    @media (min-width: 1200px) {
        max-width: 1199px;
    }
}

@mixin createGenericRules($className, $rule, $values, $unit, $suffix) {
    @each $value in $values {
        $cleanValue: str-replace(#{$value}, '.', 'dot'); //avoid class name error
        .#{$className}-#{$cleanValue}#{$suffix} {
            #{$rule}: #{$value}#{$unit} !important;
        }
    }
}

@mixin azo-sans-uber-regular($isImportant: false) {
    @include font($azo-sans-uber, 400, $isImportant)
}

@mixin font($fontFamily, $fontWeight, $isImportant: false, $fontStyle: normal) {
    font-family: if($isImportant, $fontFamily !important, $fontFamily);
    font-weight: if($isImportant, $fontWeight !important, $fontWeight);
    font-style: if($isImportant, $fontStyle !important, $fontStyle);
}